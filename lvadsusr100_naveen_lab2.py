# -*- coding: utf-8 -*-
"""LVADSUSR100_Naveen_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_mRUZEPlMRZk7ynUVWvt03t8_J06uvvX
"""

import pandas as pd

data=pd.read_csv('/content/booking.csv')
df=pd.DataFrame(data)
df

# Here we Don't Have any null values

df.isnull().sum()

df.dropna()

import matplotlib.pyplot as plt
plt.boxplot(df['number of weekend nights'])
plt.show()

#removing outliers
threshold_value=47
df=df[df['number of weekend nights']<=5]
print(df)



df.head()

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['Booking_ID'] = encoder.fit_transform(data['Booking_ID'])
data['type of meal'] = encoder.fit_transform(data['type of meal'])
data['room type'] = encoder.fit_transform(data['room type'])
data['market segment type'] = encoder.fit_transform(data['market segment type'])
data['booking status'] = encoder.fit_transform(data['booking status'])
data.head()

# to remove duplicate rows we have one function

df.drop_duplicates()
# we have any duplicate rows, so it will remove rows from the data

#here first we are not consider the 'date of reservation','lead time' column are fitures
# so that we can drop those columns also
df=df.drop(['date of reservation','lead time'],axis=1)
X=df.drop(['booking status'],axis=1)
y=df['booking status']

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=42,test_size=0.3)

from sklearn.tree import DecisionTreeClassifier

Decisionclassifier=DecisionTreeClassifier()

Decisionclassifier.fit(X_train,y_train)

predictions=Decisionclassifier.predict(X_test)
print(predictions)

from sklearn.metrics import *

print("Accuracy : ",accuracy_score(y_test,predictions),'\n')

print("Precision : ",precision_score(y_test,predictions),'\n')

print("Recall : ",recall_score(y_test,predictions),'\n')

print("F1- Score : ",f1_score(y_test,predictions),'\n')


print('Confusion matrix ')
print(confusion_matrix(y_test,predictions))

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, y_train)
y_pred1 = model.predict(X_test)
print("Logistic Regression :")
print("accuracy score :", accuracy_score(y_test, y_pred1)*100)
print("Precision :", precision_score(y_test, y_pred1, average='weighted'))
print("Recall :", recall_score(y_test, y_pred1, average='weighted'))
print("F1 score :",f1_score(y_test, y_pred1, average='weighted'))